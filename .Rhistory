getwd()
datosgenerales = read.csv(basefuga_general.csv, header = T, sep=',')
datosgenerales = read.csv("basefuga_general.csv", header = T, sep=',')
datosgenerales
View(datosgenerales)
datosgenerales = read.csv("basefuga_general.csv", header = T, sep=',')
datosgenerales
View(datosgenerales)
View(datosgenerales)
View(datosgenerales)
renta = datosgenerales$RENTA
fuga = datosgenerales$FUGA=='NO FUGA'
datosgenerales$RENTA
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = as.character(datosgenerales$FUGA="NO FUGA"))
)
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = as.character( C(datosgenerales$FUGA=="NO FUGA"))
)
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = as.character(datosgenerales$FUGA=="NO FUGA")
)
View(mi_df)
datosgenerales$FUGA
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = datosgenerales$FUGA=="NO FUGA"
)
View(mi_df)
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = datosgenerales$FUGA
)
View(mi_df)
nofuga = datosgenerales$FUGA == "NO FUGA"
plot(x = datosgenerales$RENTA, y=datosgenerales$FUGA)
plot(x = datosgenerales$RENTA)
plot(x = datosgenerales$NIV_EDUC)
plot(x = datosgenerales$FUGA)
plot(x = datosgenerales$FUGA, main = "Gráfica de Educacíón",
xlab = "Nivel educativo", ylab = "Frecuencia",
col = c("royalblue", "seagreen", "purple", "grey"))
plot(x = datosgenerales$RENTA, main = "Gráfica de Educacíón",
xlab = "Nivel educativo", ylab = "Frecuencia",
col = c("royalblue", "seagreen", "purple", "grey"))
barplot(x = datosgenerales$RENTA, main = "Gráfica de Educacíón",
xlab = "Nivel educativo", ylab = "Frecuencia",
col = c("royalblue", "seagreen", "purple", "grey"))
table_datos <- table(datosgenerales$FUGA, datosgenerales$RENTA)
table_datos
View(table_datos)
barplot(table_datos)
table_datos <- table(datosgenerales$NIV_EDUC, datosgenerales$RENTA)
View(table_datos)
barplot(table_datos)
table_datos <- table(datosgenerales$NIV_EDUC, datosgenerales$RENTA)
datosgenerales = read.csv("basefuga_general.csv", header = T, sep=',')
datosgenerales
nofuga = datosgenerales$FUGA == "NO FUGA"
mi_df <- data.frame(
"renta" =  c(datosgenerales$RENTA),
"Fuga" = datosgenerales$FUGA
)
table_datos <- table(datosgenerales$NIV_EDUC, datosgenerales$RENTA)
View(table_datos)
barplot(table_datos)
table_datos <- table(datosgenerales$RENTA, datosgenerales$NIV_EDUC)
View(table_datos)
barplot(table_datos)
ptab <- prop.table(table_datos, margin = 2)
barplot(ptab,  main = "Renta por nivel educativo",
xlab = "Nivel educativo", ylab = "Renta",
col = c("royalblue", "grey"))
ptab <- prop.table(table_datos, margin = 5)
ptab <- prop.table(table_datos, margin = 3)
ptab <- prop.table(table_datos, margin = 2)
ptab <- prop.table(table_datos, margin = 1)
table_datos <- table(datosgenerales$RENTA, datosgenerales$NIV_EDUC)
barplot(ptab,  main = "Renta por nivel educativo",
xlab = "Nivel educativo", ylab = "Renta",
col = c("royalblue", "grey"))
plot(x = ptab, main = "Gráfica de Educacíón",
xlab = "Nivel educativo", ylab = "Frecuencia",
col = c("royalblue", "seagreen", "purple", "grey")))
plot(x = datosgenerales$NIV_EDUC, main = "Gráfica de Educacíón",
xlab = "Nivel educativo", ylab = "Frecuencia",
col = c("royalblue", "seagreen", "purple", "grey")))
is.na(datosgenerales$NIV_EDUC)
sum(
is.na(datosgenerales$NIV_EDUC)
)
library(ggplot2)
install.packages("ggplot2")
library(ggplot2)
datoslimpios <- na.omit(datosgenerales$NIV_EDUC)
p<-ggplot(data=df, aes(x=dose, y=len)) +
geom_bar(stat="identity")
(stat="identity")
p
p<-ggplot(datosgenerales, aes(x=dose, y=len)) +
geom_bar(stat="identity")
p
p<-ggplot(datosgenerales, aes(x=RENTA, y=renta)) +
geom_bar(stat="identity")
p
p<-ggplot(datosgenerales, aes(x=RENTA, y=RENTA)) +
geom_bar(stat="identity")
p
p<-ggplot(datosgenerales, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity")
p
p<-ggplot(data=df, aes(x=RENTA, y=NIV_EDUC)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p<-ggplot(data=df, aes(x=RENTA, y=NIV_EDUC)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p<-ggplot(datosgenerales, aes(x=RENTA, y=NIV_EDUC)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p
p<-ggplot(datosgenerales, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity", fill="steelblue")+
theme_minimal()
p
ggplot(datosgenerales, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=len), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(datosgenerales, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=RENTA), vjust=1.6, color="white", size=3.5)+
theme_minimal()
ggplot(datoslimpios, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=RENTA), vjust=1.6, color="white", size=3.5)+
theme_minimal()
na.omit(datosgenerales)
datos = na.omit(datosgenerales)
ggplot(datos, aes(x=NIV_EDUC, y=RENTA)) +
geom_bar(stat="identity", fill="steelblue")+
geom_text(aes(label=RENTA), vjust=1.6, color="white", size=3.5)+
theme_minimal()
install.packages("skimr")
general<-read.csv("BASEFUGA.csv", header = T, na="NA", sep=";")
"Esta función cuenta los valores NA que hay en cada columna"
sapply(general, function(x) sum(is.na(x)))
table(general$GENERO)
table(general$NIV_EDUC)
table(general$E_CIVIL)
table(general$CIUDAD)
mean(general$EDAD,na.rm = TRUE)
mean(general$COD_COM,na.rm = TRUE)
"Primero las variables cualitativas o categóricas"
general$GENERO[is.na(general$GENERO)] <- "M"
general$NIV_EDUC[is.na(general$NIV_EDUC)] <- "UNV"
general$E_CIVIL[is.na(general$E_CIVIL)] <- "CAS"
general$CIUDAD[is.na(general$CIUDAD)] <- "SANTIAGO"
"Segundo las variables cuantitativas o numéricas"
general$EDAD[is.na(general$EDAD)] <- 44
general$COD_COM[is.na(general$COD_COM)] <- 108
#VERIFICAMOS SI LOS VALORES NA FUERON MODIFICADOS CON LA FUNCIÓN SAPPLY
sapply(general, function(x) sum(is.na(x)))
#POR OTRA PARTE, SE ENCONTRARON CARACTERES ESPECIALES EN LA VARIABLE EDAD, YA QUE EL VALOR MÍNIMO ESTÁ DADO POR UN VALOR NEGATIVO
#Summary: muestra un resumen estadistico de la varible EDAD
summary(general$EDAD)
#POR LO TANTO SE UTILIZÓ LA FUNCIÓN gsub PARA ELIMINAR EL CARACTER "-"
general$EDAD<-gsub("-","", general$EDAD)
#PERO COMO ESTA FUNCIÓN SE TRABAJA PARA CADENAS O VARIABLES CUALITATIVAS, SE REALIZÓ UNA CONVERSIÓN DE CADENA A INTEGER
general$EDAD<-as.integer(general$EDAD)
#MIRAMOS SI LA CONVERSIÓN SE REALIZÓ CON ÉXITO
class(general$EDAD)
"------------------------------------------------------------------------------------------------------------------------------
PUNTO 2
------------------------------------------------------------------------------------------------------------------------------"
"análisis descriptivo de los datos:
1.tipos de variables estadisticas
2.medidas de posición central
3.medidas de posición no central
4.Medidas de dispersión
5.Tabla de frecuencias
6.Gráficos"
"1.variables estadisticas"
#NÚMERO DE VARIABLES CON EL COMANDO NCOL
ncol(general)
"2.medida de posición central"
#PARA ESTO, NECESITAMOS INSTALAR Y LLAMAR LA LIBRERÍA PARA UTILIZAR LA FUNCIÓN SKIMR
#ESTA NOS ARROJA LAS MEDIDAS DE POSICIÓN CENTRAL, NO CENTRAL Y MEDIDAS DE DISPERSIÓN
install.packages("skimr")
library(skimr)
skim(general)
#RANGO INTERCUATILICO POR CADA VARIABLE
IQR(general$ID)
IQR(general$RENTA)
IQR(general$EDAD)
IQR(general$COD_OFI)
IQR(general$COD_COM)
IQR(general$D_Marzo)
IQR(general$D_Abril)
IQR(general$D_Mayo)
IQR(general$D_Junio)
IQR(general$D_Julio)
IQR(general$D_Agosto)
IQR(general$D_Septiembre)
IQR(general$M_MOROSO)
IQR(general$MONTO)
#VARIANZA PARA CADA VARIABLE
var(general$ID)
var(general$RENTA)
var(general$EDAD)
var(general$COD_OFI)
var(general$COD_COM)
var(general$D_Marzo)
var(general$D_Abril)
var(general$D_Mayo)
var(general$D_Junio)
var(general$D_Julio)
var(general$D_Agosto)
var(general$D_Septiembre)
var(general$M_MOROSO)
var(general$MONTO)
"5.Tabla de frecuencias para las variables RENTA y MONTO"
installed.packages("dummies")
install.packages("dummies")
install.packages("kableextra")
library(dummies)
library(kableExtra)
library(kableExtra)
install.packages("kableextra")
install.packages("kableExtra")
general<-read.csv("BASEFUGA.csv", header = T, na="NA", sep=";")
sapply(general, function(x) sum(is.na(x)))
table(general$GENERO)
table(general$NIV_EDUC)
table(general$E_CIVIL)
table(general$CIUDAD)
"Para la variable EDAD Y COD_COM se utilizó la media hallada obviando los valores faltantes
na.rm hace referencia a la existencia de valores faltantes, por lo que es necesario colocarle TRUE para que los omita
"
mean(general$EDAD,na.rm = TRUE)
mean(general$COD_COM,na.rm = TRUE)
library(dummies)
library(kableExtra)
base <- read.csv("BASEFUGA.CSV")
kable(head(base),format = "markdown")
#creando un dataframe
base.dummy <- dummy.data.frame(base)
library(dummies)
#creando un dataframe
base.dummy <- dummy.data.frame(base)
kable(head(base.dummy),format = "markdown")
kable(head(base),format = "markdown")
library(dummies)
library(kableExtra)
base <- read.csv("BASEFUGA.CSV")
kable(head(base),format = "markdown")
#creando un dataframe
base.dummy <- dummy.data.frame(base)
kable(head(base.dummy),format = "markdown")
#creando un dataframe
base.dummy <- dummy.data.frame(base)
kable(head(base.dummy),format = "markdown")
View(base.dummy)
View(base.dummy)
View(base)
datos = read.csv("PRUEBAND.CSV", hheader = T, sep = ';')
datos = read.csv("PRUEBAND.CSV", hheader = T, sep = ',')
datos = read.csv("pruebaND.CSV", hheader = T, sep = ',')
datos = read.csv("pruebaND.CSV", header = T, sep = ',')
View(datos)
datos = read.csv("pruebaND.CSV", header = T, sep = ';')
View(datos)
edad = c(datos$EDAD)
hist(edad)
mesmoroso = c(datos$M_MOROSO)
hsit(mesmoroso)
hist(mesmoroso)
curve(dexp(mesmoroso), from = 0, to = 10)
curve(dexp(mesmoroso), from = 0, to = 10)
datos = read.csv("pruebaND2.CSV", header = T, sep = ';')
edad = c(datos$EDAD)
mesmoroso = c(datos$M_MOROSO)
hist(edad)
library(skimr)
str(datos)
View(datos)
colnames(dataset)[7] <- "TipoCliente"
colnames(datos)[7] <- "TipoCliente"
datos$TipoCliente <- factor(datos$TipoCliente, levels = c("2","3"), labels = c("No fugitivo", "Fugitivo"))
summary(datos)
datos2 = na.omit(datos)
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos2)
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos2)
colnames(datos2)[7] <- "TipoCliente"
datos2$TipoCliente <- factor(datos2$TipoCliente, levels = c("2","3"), labels = c("No fugitivo", "Fugitivo"))
summary(datos2)
colnames(datos)[7] <- "TipoCliente"
datos$TipoCliente <- factor(datos$TipoCliente, levels = c("0","1"), labels = c("No fugitivo", "Fugitivo"))
summary(datos)
sum(is.na(datos$TipoCliente))
datos = read.csv("pruebaND2.CSV", header = T, sep = ';')
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
sum(is.na(datos$FUGA))
colnames(datos)[8] <- "TipoCliente"
summary(datos)
#A partir de la tabla anterior, también podemos ver que,
#a excepción de la variable FUGA,
#todos los demás registros son numéricos.
#Sin embargo, ya que se trata de un problema de clasificación
#es conveniente que nuestra variable a predecir,
#es decir la variable dependiente FUGA,
#sea un Factor o variable categórica.
#en nuestro caso ya es un factor
colnames(datos)[8] <- "TipoCliente"
#A partir de la tabla anterior, también podemos ver que,
#a excepción de la variable FUGA,
#todos los demás registros son numéricos.
#Sin embargo, ya que se trata de un problema de clasificación
#es conveniente que nuestra variable a predecir,
#es decir la variable dependiente FUGA,
#sea un Factor o variable categórica.
#en nuestro caso ya es un factor
colnames(datos)[7] <- "TipoCliente"
datos$TipoCliente <- factor(datos$TipoCliente, levels = c("0","1"), labels = c("No fugitivo", "Fugitivo"))
summary(datos)
summary(datos)
datos = read.csv("pruebaND2.CSV", header = T, sep = ';')
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
summary(datos)
dataset[, c(1:6)] <- scale(dataset[, c(1:6)])
datos = read.csv("pruebaND2.CSV", header = T, sep = ';')
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
summary(datos)
datos[, c(1:6)] <- scale(datos[, c(1:6)])
summary(datos)
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
datos[, c(2:6)] <- scale(datos[, c(2:6)])
summary(dataset)
summary(datos)
install.packages("caTools")
library(caTools)
set.seed(1200) #asignamos una semilla para el entrenamiento
split <- sample.split(datos$FUGA, SplitRatio = 0.80)
training_set <- subset(datos, split == TRUE)
test_set <- subset(datos, split == FALSE)
table(training_set$FUGA)
table(test_set$FUGA)  #para la table del test o evaluacion
#La implementación de la red neuronal la haremos haciendo uso del paquete H2O
install.packages("H20")
library(h2o)
#La implementación de la red neuronal la haremos haciendo uso del paquete H2O
install.packages("h2o")
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5, 5),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5, 5),
epochs = 500,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
install.packages("ROCR")
library(ROCR)
pred1 <- prediction(as.numeric(y_pred), as.numeric(y_test_set))
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
View(test_set)
View(training_set)
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(7, 7),
epochs = 50,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(7, 7),
epochs = 1000,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(7, 7),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(3, 3),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5, 5),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
datos = read.csv("pruebaND2.CSV")
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
summary(datos)
datos = read.csv("pruebaND2.CSV", header = T, sep = ';')
#Haciendo uso de la función str,
#podemos explorar la estructura del dataframe que contiene el conjunto de datos
str(datos)
summary(datos)
datos[, c(2:6)] <- scale(datos[, c(2:6)])
summary(datos)
library(caTools)
set.seed(100) #asignamos una semilla para el entrenamiento
split <- sample.split(datos$FUGA, SplitRatio = 0.80)
training_set <- subset(datos, split == TRUE)
test_set <- subset(datos, split == FALSE)
View(test_set)
table(training_set$FUGA) #para la tabla del entrenamiento
table(test_set$FUGA)  #para la table del test o evaluacion
library(caTools)
set.seed(100) #asignamos una semilla para el entrenamiento
split <- sample.split(datos$FUGA, SplitRatio = 0.60)
training_set <- subset(datos, split == TRUE)
test_set <- subset(datos, split == FALSE)
table(training_set$FUGA) #para la tabla del entrenamiento
table(test_set$FUGA)  #para la table del test o evaluacion
set.seed(100) #asignamos una semilla para el entrenamiento
split <- sample.split(datos$FUGA, SplitRatio = 0.40)
training_set <- subset(datos, split == TRUE)
test_set <- subset(datos, split == FALSE)
table(training_set$FUGA) #para la tabla del entrenamiento
table(test_set$FUGA)  #para la table del test o evaluacion
library(h2o)
h2o.init(nthreads = -1)
classifier = h2o.deeplearning(y = 'FUGA',
training_frame = as.h2o(training_set),
activation = 'Rectifier',
hidden = c(5, 5),
epochs = 100,
train_samples_per_iteration = -2)
prob_pred <- h2o.predict(classifier, newdata = as.h2o(test_set))
#REALIZAMOS LA MATRIZ DE CONFUSION
y_pred <- as.vector(ifelse(prob_pred$predict == 'NO FUGA', 0, 1))
y_test_set <- ifelse(test_set$FUGA == 'FUGA ', 0, 1)
cm <- table(y_test_set, y_pred)
cm
